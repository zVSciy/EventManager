volumes:
  events-mysql-data:
  events-fast-data:
  tickets-fast-data:
  tickets-mysql-data:
  auth-db-data:
  auth-api-data:

networks:
  eventmanager-net:

services:

# -------------------------
#  GENERAL - REVERSE PROXY
# -------------------------

  nginx:
    image: nginx:latest

    restart: always
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    
    ports:
      - "8080:443"
    
    depends_on:
      - events_db
      - events_api
      - events_web
    networks:
      - eventmanager-net

# -------------------------
#   CONTAINERS - EVENTS
# -------------------------

  events_db:
    image: mysql:latest

    volumes:
      - events-mysql-data:/var/lib/mysql
    
    env_file: .env
    environment:
      MYSQL_DATABASE: ${EVENTS_MYSQL_DATABASE}
      MYSQL_USER: ${EVENTS_MYSQL_USER}
      MYSQL_PASSWORD: ${EVENTS_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${EVENTS_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE_PORT: ${EVENTS_MYSQL_DATABASE_PORT}

    networks:
      - eventmanager-net

    healthcheck:
       test: 'echo "select now(); " | mysql -h ${EVENTS_MYSQL_HOST} -u${EVENTS_MYSQL_USER} -p${EVENTS_MYSQL_PASSWORD}'
       interval: 1s
       retries: 10
       start_period: 10s
       timeout: 1s

    ports:
    - "3306"

  events_api:
    image: registry.gitlab.com/kavalarj/eventmanager/events_api:latest
    build:
      context: ./Events
      dockerfile: ./DockerFile
    
    volumes:
    - events-fast-data:/media
    - ./Events/src:/app

    depends_on:
      events_db:
        condition: service_healthy

    env_file: .env
    environment:
      ALLOWED_HOSTS: '*'

    working_dir: "/app"
    
    ports:
    - "8000"

    command: >
      sh -c "python test.py && 
             exec uvicorn main:app --host 0.0.0.0 --reload"

    networks:
    - eventmanager-net

  events_web:
    image: registry.gitlab.com/kavalarj/eventmanager/events_web:latest

    build: ./Events/eventsSvelte

    ports:
     - "5173:5173"

    volumes:
      - ./Events/eventsSvelte:/app #Hot-reload
      - /app/node_modules

    networks:
      - eventmanager-net

# -------------------------
#   CONTAINERS - REVIEW
# -------------------------

  review_api:   
    image: registry.gitlab.com/kavalarj/eventmanager/review_api:latest
 
    build:
      context: ./Review/backend
      dockerfile: Dockerfile

    ports:
      - "8083:8083"

    command: >
      sh -c "exec uvicorn main:app --host 0.0.0.0 --port 8083 --reload"

    networks:
      - eventmanager-net

  review_web:
    image: registry.gitlab.com/kavalarj/eventmanager/review_web:latest
    build:
      context: ./Review/frontend
      dockerfile: Dockerfile.dev

    ports:
      - "3000:3000"

    volumes:
      - ./Review/frontend:/app
      - /app/node_modules

    environment:
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
      - NODE_ENV=development

    networks:
      - eventmanager-net

    depends_on:
      - review_api

# -------------------------
#   CONTAINERS - TICKETS
# -------------------------

  tickets_db: 
    image: mysql:latest

    volumes:
      - tickets-mysql-data:/var/lib/mysql

    env_file: .env

    environment:
      MYSQL_DATABASE: ${TICKETS_MYSQL_DATABASE}
      MYSQL_USER: ${TICKETS_MYSQL_USER}
      MYSQL_PASSWORD: ${TICKETS_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${TICKETS_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE_PORT: ${TICKETS_MYSQL_DATABASE_PORT}

    networks:
      - eventmanager-net

    healthcheck:
      test: 'echo "select now();" | mysql -h ${TICKETS_MYSQL_DATABASE_HOST} -u${TICKETS_MYSQL_USER} -p${TICKETS_MYSQL_PASSWORD}'
      interval: 1s
      retries: 10
      start_period: 10s
      timeout: 1s

  tickets_api:
    image: registry.gitlab.com/kavalarj/eventmanager/tickets_api:latest

    build:
      context: ./Tickets
      dockerfile: ./docker/fastapi/Dockerfile

    env_file: .env

    restart: always
    
    volumes:
    - tickets-fast-data:/media
    - ./Tickets/src_fastapi:/app

    ports:
      - "8001:8000"

    depends_on:
      tickets_db:
        condition: service_healthy

    command: >
      sh -c "python test_app.py &&
             uvicorn main:app --host 0.0.0.0 --port 8000 --reload"

    networks:
      - eventmanager-net
  
  tickets_web:
    image: registry.gitlab.com/kavalarj/eventmanager/tickets_web:latest
    build:
      context: ./Tickets
      dockerfile: ./docker/sveltekit/Dockerfile

    ports:
      - "5173"

    volumes:
      - ./Tickets/src_svelte_frontend:/app #Hot-reload
      - /app/node_modules

    depends_on:
      - tickets_api

    networks:
      - eventmanager-net

# --------------------------------
#   CONTAINERS - UserManagement
# --------------------------------

  auth_db:
    image: mysql:latest

    volumes:
      - auth-db-data:/var/lib/mysql

    env_file: .env
    environment:
      MYSQL_DATABASE: ${AUTH_MYSQL_DATABASE}
      MYSQL_USER: ${AUTH_MYSQL_USER}
      MYSQL_PASSWORD: ${AUTH_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${AUTH_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE_PORT: ${AUTH_MYSQL_DATABASE_PORT}

    networks:
      - eventmanager-net

    healthcheck:
       test: 'echo "select now(); " | mysql -h ${AUTH_MYSQL_DATABASE_HOST} -u${AUTH_MYSQL_USER} -p${AUTH_MYSQL_PASSWORD}'
       interval: 1s
       retries: 10
       start_period: 10s
       timeout: 1s

    ports:
    - "3306"

  auth_api:
    image: registry.gitlab.com/kavalarj/eventmanager/auth_api:latest
    build:
      context: ./UserManagement
      dockerfile: ./docker/FastAPI/Dockerfile

    volumes:
    - auth-api-data:/media
    - ./UserManagement/ssl:/app/ssl
    - ./UserManagement/src:/app

    depends_on:
      auth_db:
        condition: service_healthy

    env_file: .env
    environment:
      ALLOWED_HOSTS: ${AUTH_ALLOWED_HOSTS}

    working_dir: "/app"

    ports:
    - "8000"

    command: >
      sh -c "python test_api.py &&
            uvicorn main:app --host 0.0.0.0 --ssl-keyfile /app/ssl/certificate.key --ssl-certfile /app/ssl/certificate.crt --workers 4"

    networks:
      - eventmanager-net

  auth_web:
    image: registry.gitlab.com/kavalarj/eventmanager/auth_web:latest
    build:
      context: ./UserManagement
      dockerfile: ./docker/Svelte/Dockerfile
    ports:
      - "5173"
    volumes:
      - ./UserManagement/frontend:/app
      - /app/node_modules
    networks:
      - eventmanager-net


# --------------------------------
#   CONTAINERS - Notification
# --------------------------------

  notification_db:
    container_name: notification_db
    image: mysql:latest
    
    volumes:
      - notification_db_data:/var/lib/mysql
    
    env_file: .env
    environment:
      MYSQL_DATABASE: ${NOTIF_MYSQL_DATABASE}
      MYSQL_USER: ${NOTIF_MYSQL_USER}
      MYSQL_PASSWORD: ${NOTIF_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${NOTIF_MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE_PORT: ${NOTIF_MYSQL_DATABASE_PORT}

    networks:
      - eventmanager-net

    healthcheck:
      test: 'echo "select now(); " | mysql -u${NOTIF_MYSQL_USER} -p${NOTIF_MYSQL_PASSWORD}'
      interval: 1m
      retries: 10
      start_period: 20s
      timeout: 3s

    ports:
    - "3306"

  notification_api:
    image: registry.gitlab.com/kavalarj/eventmanager/notification_api:latest
    build:
      context: ./Notifications
      dockerfile: ./docker/FastAPI/Dockerfile

    depends_on:
      notification_db:
        condition: service_healthy

    env_file: .env
    environment:
      ALLOWED_HOSTS: '*'

    working_dir: "/app"
    
    ports:
    - "8000"

    command: >
      sh -c "pytest || true && 
             exec uvicorn main:app --host 0.0.0.0 --reload"

    healthcheck:
      test: ["CMD", "curl", "http://localhost:8000/docs"]
      interval: 1m
      retries: 2
      start_period: 20s
      timeout: 3s

    networks:
      - eventmanager-net

  #Service "sveltekit"
  notification_web:
    image: registry.gitlab.com/kavalarj/eventmanager/notification_web:latest
    build:
      context: ./Notifications
      dockerfile: ./docker/sveltekit/Dockerfile

    expose:
      - 5173

    depends_on:
      - notification_api

    networks:
      - eventmanager-net



  integration_test:
      build:
        context: ./Integration_Tests
        dockerfile: ./docker/Dockerfile

      depends_on:
        auth_api:
          condition: service_healthy
        events_api:
          condition: service_healthy
        tickets_api:
          condition: service_healthy
        review_api:
          condition: service_healthy
        notification_api:
          condition: service_healthy

      working_dir: /app

      command: >
        sh -c "python test_app.py"

      networks:
        - eventmanager-net